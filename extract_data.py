def gene_to_uniprot():
    '''This part extract list of uniprot corresponding to gene mutated for each cell line, gene_to_uniprot file has been generated by data_to_uniprot.py 
    and completed by mannually searching in gene_to_uniprot_completed'''
    gene_to_uniprot={}
    g=open("gene_to_uniprot_completed.tsv",'r')
    for line in g:
        gene_to_uniprot[line.split()[0]]=line.split()[1]
    g.close()
    return gene_to_uniprot

def extract_mutation():
    '''create ordered list of genes in the matrix and extract the list of uniprot (converted from mutated gene) for each cell line'''
    f=open('../Cluster_mutations/cell_lines_mutations_matrix.csv','r')
    first_line=f.readline()
    gene_list=[]
    gene_to_uniprot_dico=gene_to_uniprot()
    for gene in first_line.strip().split(';'):
        if gene !='' and gene!='samples':
            gene_list.append(gene_to_uniprot_dico[gene])
    prot_changed_CL={}
    for line in f:
        tab_line=line.strip().split(";")
        cell_line=tab_line[0]
        if cell_line not in prot_changed_CL:
            prot_changed_CL[cell_line]=[]
        for i in range(1,len(tab_line)-1):       
            if int(tab_line[i]):           
                prot_changed_CL[cell_line].append(gene_list[i-1])
    f.close()    
    return prot_changed_CL




def extract_absent_nodes(cell_line):
    '''this function extract for each cell line proteine not express from transcriptomic data threshold is defined in extract_transcriptomic_data jypiter notebook
'''
    list_absent_prot=[]
    file=open("/home/buffard/code/donn√©es_transcriptome/uniprot_not_detected_filtered_network/"+cell_line+".csv","r")
    file.readline()
    for line in file:
        list_absent_prot.append(line.strip())
    return list_absent_prot

def extra_prot(gene_file='/home/buffard/code/Cytogenetic/cytogenetic_genes.csv',cytogenetic_file="/home/buffard/code/Cytogenetic/cytogenetic_aberration.csv"):
    '''This code extract proteins to add for each cell line from the matrix of cytogenetic_abberation 
    and the file that describe for each cytogenetic aberration corresponding proteins'''
    CL_extra={}
    cyto_to_uniprot={}
    '''not working! encoding problem?
    cyto_gene_file=open(gene_file,'r')
    for line in cyto_gene_file:
        print(line)
        line_list=line.strip().split('\t')
        cyto=line_list[0]
        print(cyto)
        print(line_list[1:-1])
        cyto_to_uniprot[cyto]=line_list[1:-1]
    print(cyto_to_uniprot)'''
    cyto_to_uniprot={"t(4;14)":["P22607","O96028"],"t(11;14)":["P24385"],"t(14:16)":["O75444"],"t(12;14)":["P30279"],"t(20;22)":["Q9Y5Q3"],"t(16;22)":["O75444"]}   
    CL_cyto={}
    cytogenetic_file=open(cytogenetic_file,'r')
    cytogenetic_list=cytogenetic_file.readline().strip().split()[1:-1]
    
    for line in cytogenetic_file:
        cell_line=line.strip().split()[0]
        CL_cyto[cell_line]=[]
        i=0
        for value in line.strip().split()[1:-1]:
            if int(value)==1:
                CL_cyto[cell_line].append(cytogenetic_list[i])
            i+=1
        CL_extra[cell_line]=[]
        for cyto in CL_cyto[cell_line]:
            if cyto in cyto_to_uniprot.keys():
                for prot in cyto_to_uniprot[cyto]:
                    CL_extra[cell_line].append(prot)
    
    return CL_extra
                


